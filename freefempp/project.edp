verbosity=0;

real rs = 6;
real rw = 0.5;

int Nw=8;

// Main wire (blindage) of radius rs
border circleShield(t=0,2*pi){x=rs*cos(t);y=rs*sin(t);label=0;};

real[int] X(Nw),Y(Nw);
for (int k=0;k<Nw;k++) {
  X(k)=(rs/2)*cos(2*k*pi/Nw);
  Y(k)=(rs/2)*sin(2*k*pi/Nw);
 }

// wire 1 cetered at (-1,0) radius rw
border circleWire1(t=0,2*pi){x=X(1)+rw*cos(t);y=Y(1)+rw*sin(t);label=1;}
border circleWire2(t=0,2*pi){x=X(2)+rw*cos(t);y=Y(2)+rw*sin(t);label=2;}
border circleWire3(t=0,2*pi){x=X(3)+rw*cos(t);y=Y(3)+rw*sin(t);label=3;}
border circleWire4(t=0,2*pi){x=X(4)+rw*cos(t);y=Y(4)+rw*sin(t);label=4;}
border circleWire5(t=0,2*pi){x=X(5)+rw*cos(t);y=Y(5)+rw*sin(t);label=5;}
border circleWire6(t=0,2*pi){x=X(6)+rw*cos(t);y=Y(6)+rw*sin(t);label=6;}
border circleWire7(t=0,2*pi){x=X(7)+rw*cos(t);y=Y(7)+rw*sin(t);label=7;}
border circleWire8(t=0,2*pi){x=X(0)+rw*cos(t);y=Y(0)+rw*sin(t);label=8;}

{
  int m=50;
  //for (int m=10;m<50;m++) {
  mesh Th;
  // mesh=read("mesh.msh");
  ofstream file("out/compute_"+m+".m");
  Th=buildmesh(circleShield(10*m)
	       +circleWire1(-2*m)
	       +circleWire2(-2*m)
	       +circleWire3(-2*m)
	       +circleWire4(-2*m)
	       +circleWire5(-2*m)
	       +circleWire6(-2*m)
	       +circleWire7(-2*m)
	       +circleWire8(-2*m)
	       );
  //	     +circleWireInt(-5*m));
  //plot(Th,wait=1,ps="mesh_"+m+".ps");
  // Create function space
  fespace Vh(Th,P1);
  Vh PHI,v;
  Vh[int] phi(Nw);

  real[int] BcWire(Nw+1);

  for (int k=0;k<Nw;k++){
    BcWire=0;
    BcWire(k+1)=1;
    problem Poisson(PHI,v) = int2d(Th)(dx(PHI)*(dx(v))+dy(PHI)*(dy(v)))
      +on(0,PHI=BcWire(0)) // blindage boundary
      +on(1,PHI=BcWire(1))
      +on(2,PHI=BcWire(2))
      +on(3,PHI=BcWire(3))
      +on(4,PHI=BcWire(4))
      +on(5,PHI=BcWire(5))
      +on(6,PHI=BcWire(6))
      +on(7,PHI=BcWire(7))
      +on(8,PHI=BcWire(8))
      ;
    Poisson;
    phi[k]=PHI;
    //plot(phi[k],wait=1,fill=1,ps="sol_"+k+".ps");
  }


  real[int,int] M(Nw,Nw);
  real[int,int] S(Nw,Nw);
  M=0.; S=0;

  file << "S=[";
  for (int k=0;k<Nw;k++) {
    for (int j=0;j<Nw;j++) {
      S(k,j)=int2d(Th)(dx(phi[j])*dx(phi[k])+dy(phi[j])*dy(phi[k]));
      file << S(k,j) << " ";
    }
    file << ";";
  }
  file << "];" << endl;


  file << "M=[";
  for (int k=0;k<Nw;k++) {
    for (int j=0;j<Nw;j++) {
      M(k,j)=int1d(Th,k+1)(dx(phi[j])*N.x+dy(phi[j])*N.y);
      file << M(k,j) << " ";
    }
    file << ";";
  }
  file << "];" << endl;

  //file << "i=" <<m<<";s=max(max(S));m=min(eig(M));c=cond(M);printf(\"%f %f %f %f \\n\",i,s,m,c)" << endl;
  //} // for
// plot(phi0,wait=1,value=true);
// plot(phi,wait=1,value=true);
// cout<< phi0[].min <<endl;
// cout<< phi[].min <<endl;
  cout << "M=" << M << endl;
  cout << "S=" << S <<endl;
}
//exec("gnuplot -p -e \"plot 'eig.dat' u 1:2 w l title 'lack of symmetry (sup error)' \"");
