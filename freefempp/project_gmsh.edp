///////////////////////////////////////////////////////////////////////////////
//
// SEME Strasbourg 2014 - Axessim project
// Author(s): - J. Aghili <aghili at univ-montp2.fr>
//            - G. Dollé <gdolle at unistra.fr>
//            - A. Samaké <samake at math.unistra.fr>
//            - N. Pham <tnhung.pham at gmail.com>
// Copyright (C) 2014 University of Strasbourg
//
// See more information at `https://github.com/gdolle/SEME2014_Axessim`
//
// NOTE:
//
// This gmsh version is specific to 'CallWriteNCircle', `see multiwire.geo`!
// For the shield level n, the recursive formula to compute the number of
// internal wires including internal shield is (excluding external shield)
// * Nw(i) = Nw(i-1) + 2*n+2, N(1)=3 .
// * Mesh are providen for Ns=2,5,10.
// * All generated data are in ./work/ directory
//
////////////////////////////////////////////////////////////////////////////////

load "gmsh"

macro Grad(u) [dx(u),dy(u)] //EOM

// Number of internal shield.
int Ns=5;

// Compute the number of internal wires and shields without the external shield.
int N1=2;
for(int i=2;i<=Ns;i++)
  N1+=2*i+2;
int Nw=N1;

// Create a vector with the shield labels/indexes
int[int] shieldlabels(Ns+1);
shieldlabels[0]=4;
for(int i=2;i<=Ns;i++)
  shieldlabels[i-1] = shieldlabels[i-2] + 2*i+3;
shieldlabels[Ns]=Nw+1;

cout << "------------------------------------------\n";
cout << "Number of internal wires + shields = " << Nw << "\n";
cout << "Number of internal shield = " << Ns << "\n";
cout << "Shields labels: " << shieldlabels << " \n";
cout << "------------------------------------------\n";

int[int] label0(Nw); // Vector of wire indexes for dirichlet condition = 0.
int label1; // Index for the wire to put the dirichlet condition = 1.
int shieldlabel = Nw + 1; // Shield label number.

exec("mkdir -p work");
exec("mkdir -p work/figs");
ofstream file("work/compute_"+Nw+".m");

mesh Th = gmshload("../mesh/multiwires"+Ns+".msh");

plot(Th,wait=1,ps="figs/mesh-1.ps");

fespace Vh(Th,P1);
Vh PHI,v;
Vh[int] phi(Nw+1);

// Variationnal form.
problem Poisson(PHI,v)
     =  int2d(Th)( Grad(PHI)'*Grad(v) )
        +on(label0,PHI=0)
        +on(label1,PHI=1);

// Solve Poisson problem for each wire.
for(int i=0;i<Nw;i++)
{
  // Create a vector of wire indexes.
  int count=0;
  for (int j=0;j<Nw;j++)
  {
    if(j==i+1) { label1=j; }
    else { label0(count)=j; count++; }
  }
  Poisson;
  phi[i]=PHI;
  //plot(phi[i],fill=1,wait=1,dim=3,cmm="Solution k="+i);
  //plot(phi[k],fill=1,wait=1,dim=3,cmm="Solution k="+i,ps="work/figs/proj_gmsh-"+i+".ps");
}

real[int,int] M(Nw,Nw);
real[int,int] S(Nw,Nw);
real[int,int] Lext(Nw,Nw);
M=0.; S=0;

// Compute matrix S.
file << "S=[";
for (int k=0;k<Nw;k++) {
    for (int j=0;j<Nw;j++) {
        S(k,j)=int2d(Th)(dx(phi[j])*dx(phi[k])+dy(phi[j])*dy(phi[k]));
        file << S(k,j) << " ";
    }
    file << ";";
}
file << "];" << endl;

// Compute matrice M.
file << "M=[";
for (int k=0;k<Nw;k++) {
    for (int j=0;j<Nw;j++) {
        M(k,j)=int1d(Th,k+1)(dx(phi[j])*N.x+dy(phi[j])*N.y);
        file << M(k,j) << " ";
    }
    file << ";";
}
file << "];" << endl;

//cout << "M=" << M << endl;
//cout << "S=" << S <<endl;

//L= M^-1;
//cout << "L=" << L <<endl;

